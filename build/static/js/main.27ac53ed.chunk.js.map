{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","words","word","value","handleChange","bind","assertThisInitialized","event","setState","target","classes","react_default","a","createElement","index_es","container","justify","direction","item","xs","className","noValidate","autoComplete","TextField_default","id","label","multiline","style","margin","placeholder","helperText","fullWidth","variant","InputLabelProps","shrink","onChange","width","height","build_default","wordCountKey","wordKey","Component","withStyles","theme","display","flexWrap","textField","marginLeft","spacing","unit","marginRight","dense","marginTop","menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAuBMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,MAAO,CACL,CAAEC,KAAM,QAASC,MAAO,GACxB,CAAED,KAAM,QAASC,MAAO,GACxB,CAAED,KAAM,SAAUC,MAAO,GACzB,CAAED,KAAM,OAAQC,MAAO,KAG3BX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAXHA,4EAcNe,GACXZ,KAAKa,SAAS,CAAER,KAAMO,EAAME,OAAON,yCAG5B,IACCO,EAAYf,KAAKJ,MAAjBmB,QACR,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,UAAU,OACzCN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACbR,EAAAC,EAAAC,cAAA,QAAMO,UAAWV,EAAQK,UAAWM,YAAU,EAACC,aAAa,OAC1DX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEY,GAAG,sBACHC,MAAM,2CACNC,WAAS,EACTC,MAAO,CAAEC,OAAQ,GACjBC,YAAY,cACZC,WAAW,mJACXC,WAAS,EACTH,OAAO,SACPI,QAAQ,WACRC,gBAAiB,CACfC,QAAQ,GAEV/B,MAAOR,KAAKI,MAAMC,KAClBmC,SAAUxC,KAAKS,iBAIrBO,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACbR,EAAAC,EAAAC,cAAA,OAAKc,MAAO,CAAES,MAAO,IAAKC,OAAQ,MAChC1B,EAAAC,EAAAC,cAACyB,EAAA1B,EAAD,CACEX,MAAON,KAAKI,MAAME,MAClBsC,aAAc,QACdC,QAAS,mBAhDLC,aAwDHC,uBAzEA,SAAAC,GAAK,MAAK,CACvB5B,UAAW,CACT6B,QAAS,OACTC,SAAU,QAEZC,UAAW,CACTC,WAAYJ,EAAMK,QAAQC,KAC1BC,YAAaP,EAAMK,QAAQC,MAE7BE,MAAO,CACLC,UAAW,IAEbC,KAAM,CACJjB,MAAO,OA4DIM,CAAmBpD,GCnEdgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.27ac53ed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ReactWordCloud from \"react-wordcloud\";\nimport { Grid } from \"@material-ui/core\";\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  }\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      words: [\n        { word: \"hello\", value: 3 },\n        { word: \"world\", value: 1 },\n        { word: \"github\", value: 1 },\n        { word: \"code\", value: 1 }\n      ]\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <Grid container justify=\"center\" direction=\"row\">\n        <Grid item xs={12}>\n          <form className={classes.container} noValidate autoComplete=\"off\">\n            <TextField\n              id=\"outlined-full-width\"\n              label=\"Mots à afficher dans le nuage de mots\"\n              multiline\n              style={{ margin: 8 }}\n              placeholder=\"Placeholder\"\n              helperText=\"Le texte ou les mots seront analysés, puis leur occurence sera proportionnelle à la taille d'écriture du mot dans le nuage ci-dessous :\"\n              fullWidth\n              margin=\"normal\"\n              variant=\"outlined\"\n              InputLabelProps={{\n                shrink: true\n              }}\n              value={this.state.text}\n              onChange={this.handleChange}\n            />\n          </form>\n        </Grid>\n        <Grid item xs={12}>\n          <div style={{ width: 600, height: 400 }}>\n            <ReactWordCloud\n              words={this.state.words}\n              wordCountKey={\"value\"}\n              wordKey={\"word\"}\n            />\n          </div>\n        </Grid>\n      </Grid>\n    );\n  }\n}\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}